on:
  pull_request:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'project/libcgroups/**'
      - 'project/libcontainer/**'
      - 'project/tools/**'

name: Base Workflow for Check, Build and Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: Rustfmt Check
    runs-on: [self-hosted]

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Run rustfmt
        run: |
          cd project
          cargo fmt --all --check

  clippy:
    name: Clippy Check
    strategy:
      fail-fast: true

    runs-on: [self-hosted]
    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run cargo clippy
        run: |
          cd project
          cargo clippy --workspace -- -D warnings

  build:
    name: Buck2 Build

    runs-on: [self-hosted]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build with Buck2
        run: |
          reindeer --third-party-dir third-party vendor
          reindeer --third-party-dir third-party buckify
          buck2 build //project/...

  test:
    name: Buck2 Test

    runs-on: [self-hosted]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup test environment 
        run: |
          # buck2 build
          reindeer --third-party-dir third-party vendor  
          reindeer --third-party-dir third-party buckify  
          buck2 build //project/libbridge:libbridge  
          buck2 build //project/libipam:libipam  

          # setup CNI directory
          sudo mkdir -p /opt/cni/bin  
          sudo mkdir -p /etc/cni/net.d  

          # configure the libbridge  
          sudo cp $(buck2 build //project/libbridge:libbridge --show-output | cut -d' ' -f2) /opt/cni/bin/libbridge  
          sudo cp $(buck2 build //project/libipam:libipam --show-output | cut -d' ' -f2) /opt/cni/bin/libipam  

      - name: Run tests
        run: |
          cd project
          # rkl-test 
          cargo test --no-run -p rkl
          sudo sh -c 'for t in target/debug/deps/test_* ; do [ "${t%.d}" = "$t" ] && $t; done'